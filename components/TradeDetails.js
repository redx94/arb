import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import { ArrowRight, AlertTriangle, CheckCircle, XCircle } from 'lucide-react';
const TradeDetails = ({ trade }) => {
    const isSuccess = trade.status === 'COMPLETED';
    const hasWarnings = trade.warnings && trade.warnings.length > 0;
    return (_jsxs("div", { className: "bg-white rounded-lg shadow-lg p-6 mb-4", children: [_jsxs("div", { className: "flex items-center justify-between mb-4", children: [_jsxs("h3", { className: "text-lg font-semibold", children: ["Trade #", trade.id.slice(0, 8)] }), _jsxs("div", { className: "flex items-center", children: [isSuccess ? (_jsx(CheckCircle, { className: "text-green-500 h-5 w-5 mr-2" })) : (_jsx(XCircle, { className: "text-red-500 h-5 w-5 mr-2" })), _jsx("span", { className: `font-medium ${isSuccess ? 'text-green-600' : 'text-red-600'}`, children: trade.status })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Type:" }), _jsxs("span", { className: "font-medium", children: [trade.type, " on ", trade.platform] })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Amount:" }), _jsxs("span", { className: "font-medium", children: [Number(trade.amount), " ETH"] })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Price:" }), _jsxs("span", { className: "font-medium", children: ["$", Number(trade.price).toFixed(4)] })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Effective Price:" }), _jsxs("span", { className: "font-medium", children: ["$", Number(trade.effectivePrice).toFixed(2)] })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Profit/Loss:" }), _jsxs("span", { className: `font-medium ${Number(trade.profitLoss) >= 0 ? 'text-green-600' : 'text-red-600'}`, children: ["$", Math.abs(Number(trade.profitLoss)).toFixed(2), " ", Number(trade.profitLoss) >= 0 ? '(Profit)' : '(Loss)'] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Gas Cost:" }), _jsxs("span", { className: "font-medium", children: ["$", trade.gasCost ? Number(trade.gasCost).toFixed(4) : '0.00'] })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Slippage:" }), _jsxs("span", { className: "font-medium", children: [((Number(trade.slippage) || 0) * 100).toFixed(2), "%"] })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Price Impact:" }), _jsxs("span", { className: "font-medium", children: [(Number(trade.priceImpact) * 100).toFixed(2), "%"] })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Execution Time:" }), _jsxs("span", { className: "font-medium", children: [trade.executionTime, "ms"] })] }), trade.blockNumber && (_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Block Number:" }), _jsxs("span", { className: "font-medium", children: ["#", trade.blockNumber] })] }))] })] }), trade.flashLoan && (_jsxs("div", { className: "mt-4 p-4 bg-blue-50 rounded-lg", children: [_jsx("h4", { className: "font-medium text-blue-800 mb-2", children: "Flash Loan Details" }), _jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-blue-700", children: "Protocol:" }), _jsx("span", { className: "font-medium", children: trade.flashLoan?.protocol })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-blue-700", children: "Amount:" }), _jsxs("span", { className: "font-medium", children: [trade.flashLoan ? Number(trade.flashLoan.amount) : 0, " ETH"] })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-blue-700", children: "Fee:" }), _jsxs("span", { className: "font-medium", children: ["$", trade.flashLoan ? Number(trade.flashLoan.fee) : 0] })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-blue-700", children: "Net Profit:" }), _jsxs("span", { className: "font-medium text-green-600", children: ["$", trade.flashLoan ? Number(trade.flashLoan.profit) : 0] })] })] })] })), trade.routingPath && (_jsxs("div", { className: "mt-4", children: [_jsx("h4", { className: "font-medium mb-2", children: "Routing Path" }), _jsx("div", { className: "flex items-center flex-wrap gap-2", children: trade.routingPath?.map((step, index) => (_jsxs(React.Fragment, { children: [_jsx("span", { className: "px-2 py-1 bg-gray-100 rounded text-sm", children: step }), trade.routingPath && index < trade.routingPath.length - 1 && (_jsx(ArrowRight, { className: "h-4 w-4 text-gray-400" }))] }, index))) })] })), hasWarnings && (_jsx("div", { className: "mt-4 p-4 bg-yellow-50 rounded-lg", children: _jsxs("div", { className: "flex items-start", children: [_jsx(AlertTriangle, { className: "h-5 w-5 text-yellow-500 mt-0.5 mr-2" }), _jsxs("div", { children: [_jsx("h4", { className: "font-medium text-yellow-800 mb-1", children: "Warnings" }), _jsx("ul", { className: "list-disc list-inside space-y-1", children: trade.warnings?.map((warning, index) => (_jsx("li", { className: "text-sm text-yellow-700", children: warning }, index))) })] })] }) })), trade.transaction && (_jsx("div", { className: "mt-4 text-sm", children: _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("span", { className: "text-gray-600", children: "Transaction Hash:" }), _jsx("code", { className: "font-mono bg-gray-100 px-2 py-1 rounded", children: trade.transaction.hash })] }) }))] }));
};
export default TradeDetails;
